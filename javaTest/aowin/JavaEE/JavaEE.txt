一.客户端技术
	1.html
		html:超文本标记语言，由一些标签组成的，可以被浏览器识别的文本文件
		元素分类：
		单标签<br/> <hr/> <input /> <img />  
		双标签 <p></p><a></a><div></div><span></span>
		
		块级元素:当前 元素独占一行
		内联元素:当前元素不会换行
		
		表单元素:可以和用户进行交互的元素，元素的value值会被form提交
		
			input:
				属性
					type - text 普通文本
						 - password 密码输入框
						 - hidden 隐藏域
						 - file 文件选择框
						 - button 普通按钮 需要添加事件
						 - submit 表单提交按钮
						 - email 邮箱
						 - number 数字
	2.css:
		a.css:层叠式样式表
		b.引入方式：
			浏览器缺省设置 
			外部样式表 新建一个.css的文件 通过在head标签中使用<link />标签导入html文件中
			内部样式表（位于 <head> 标签内部） <style></style>
			内联样式（在 HTML 元素内部） style=""属性设置 优先级最高
		c.语法：
			选择器{属性名称1:属性值1;属性名称2:属性值2}
		d.选择器
			#id id选择器，选择的是元素的id属性值
			element 标签名称选择器
			.className 类选择器 需要给使用这个选择器样式的标签元素上添加属性class="className"
			
			复杂选择器：
			派生选择器
				后代选择器 :selector1 selector2 {...}
				子代选择器 :selector1>selector2
				相邻兄弟选择器: selector1+selector2
			分组选择器:selector1,selector2,.....
			伪选择器：
				a:link
				a:visited
				a:hover
				a:active
		e.盒子模型
			每个块级元素都是由
				width:宽
				height:高
				padding：内边距 默认背景色填充在border内
				border:边框
				margin：外边距组成 注意边距合并
		f.定位
			position:
				absolute绝对定位 绝对于浏览器的左上角的位置 不影响其他的布局的流 top left bottom right
				fixed绝对定位，相对于屏幕的位置不变
				relative:相对定位，相对于元素本来的位置，不会影响其他的布局
	3.javascript:
		运行在浏览器中的解释性脚本语言	
		数据类型：
			number,string,boolean,object,function,undefined
		对象的使用
			内置对象
			Array
			Boolean 
			Date 
			Math 
			Number 
			String 
			RegExp 
			Global 
		自定义对象
			1.直接创建对象
			2.构造方法创建	
			3.json对象的创建
		函数定义：
		function 函数名字([参数,...]){函数内容}
	4.html dom
		返回dom对象的三个方法
		document.getElementById("id") //返回拥有该指定的id的第一个元素对象
		document.getElementsByName("name")//返回拥有该指定的name 属性的所有元素对象数组
		docuemnt.getElementsByTagName("element")//返回所有的指定标签名称的元素数组
	5.jQuery:
		目的:使用最少的代码做尽量多的事情
		选择器:
			#id 根据id属性获得元素对象
			element 根据元素的名称获得元素对象
			.class 根据元素的class属性值获得元素对象
			selector1,selector2,...组合选择器
	6.Servlet	
		概念：运行在服务端的一个小程序
		创建servlet:
			自定义一个类 extends HttpServlet
			重写doGet或者doPost方法
			给servlet配置访问路径
				两种方法:web.xml添加配置或者servlet类中添加注解@WebServlet
		servlet生命周期:
			创建阶段:服务端启动或者第一次访问该servlet时，创建servlet的对象并且调用servlet的init方法初始化
			运行阶段:客户端发送请求后，调用service方法，根据请求方式的不同调用doXxx方法
			消亡阶段:服务端正常关闭的时候，调用destory方法
		servlet获得客户端发送的参数：参考/servlet/src/com/aowin/servlet/RegisterServlet.java
		servlet响应内容给客户端：
			1.输出流响应内容 response.getWriter();
			2.服务端跳转
				req.getRequestDispatcher("/uri").forward(req, resp);
				客户端路径不变，一次请求
				request作用域可以用来传值给客户端
				绝对路径绝对于工程根目录
				相对路径是相对于该servlet的访问路径
				只能跳转至当前工程的路径中，/WEB-INF/下的目录也可以访问
			3.客户端跳转
				response.sendRedirect(req.getContextPath()+"/uri");
				客户端路径改变 显示第二次请求的路径 两次请求
				第二次请求是客户端发起的，所以叫客户端跳转
				绝对路径绝对于服务器的根目录
				相对路径相对于servlet的访问路径
				可以跳转到其他的工程路径中
		servlet三大作用域：
			request->HttpServletRequest
				一次请求有效 服务端跳转有效
			session->HttpSession
				一次会话有效
				同一个浏览器窗口就是一个会话，浏览器关闭后会话结束
			application->ServletContext
				整个应用程序的生命周期都生效
		客户端两种请求方式：
			get请求：
				默认请求方式就是get
				请求参数以?param1=value1&param2=value2格式拼接在地址栏上
				不安全，并且参数长度有限制
				服务端调用doGet方法
			post请求：
				请求参数存放在请求体内
				相对安全的，长度无限制
				服务端调用doPost方法
		servlet的线程安全问题：
			不是线程安全的，servlet是一个多线程单实例运行的小程序，所以不是线程安全的
			全局变量使用不当造成的线程安全问题
			线程安全问题的解决办法：
				1.不要在doGet或者doPost方法中使用全局变量 
				2.一定要使用全局变量时，要做好代码同步
				3.implements SingleThreadModel 过时，在并发时会创建多个servlet实例
		
	7.JSP:
		Java Server Pages:java的服务端页面 可以嵌套java的代码还有html css js程序
		JSP运行模型：
			编译时，是一个jsp页面的形式
			运行时，是一个servlet程序
			第一次请求jsp时，会根据jsp中的内容生成一个.java的文本文件，然后对.java文件进行编译，编译成
			对应的.class字节码文件。.java文件实际就是一个Servlet的类文件。
			创建servlet对象，调用init方法初始化 实际请求jsp时，调用的是service方法
		directive指令：
			a.<%@page %>:设置jsp页面的相关属性
				language : jsp中嵌套的语言 java
				import : 当前页面中导入的java类包
							默认导入的包import javax.servlet.*;
										import javax.servlet.http.*;
										import javax.servlet.jsp.*;
				pageEncoding ： 设置当前jsp页面使用的编码格式
				errorPage 当前页面出现运行期异常时，显示的页面
				isErrorPage 设置当前jsp页面是否是错误页面 true的时候才可以使用exception的内置变量
				
			b.<%@ include file="include.jsp"%>静态引入其他的jsp文件 
				先将文件中的内容引入到当前的jsp文件中，然后一起生成一个.java文件
			c.<%@ tagelib prefix="引入的标签的前缀" uri="引入标签的路径">
				导入其他的标签库
		java的三种脚本导入形式
			声明:
			<%!
				声明脚本;
				声明成员属性;
				定义方法;
			%>
			小脚本
			<%
				方法体的内容;
			%>
			表达式
			<%=字面常量或者是一个变量 %>
		九大内置对象：
			在小脚本中可以直接使用的对象引用
			四大作用域
				pageContext
				request
				session
				application
				response
				out
				page
				config
				exception
		标签使用:
		<jsp:forward page="second.jsp"> </jsp:forward> 服务端跳转
		
		动态引入
		<jsp:include page="include.jsp"></jsp:include>
		将引入的文件编译，本身jsp也编译，之后再引入文件
		JSP和Servlet的区别和联系：
			编译时：
			JSP:.jsp结尾的文件，他处于Web目录下 里面可以写客户端的脚本程序html css 还可以写java代码
			Servlet：java的一个类,处于src目录下，运行在服务端的程序
			
			运行时:JSP就是一个Servlet
			
			用途:JSP一般作为视图层使用，Servlet作为控制层使用
		MVC:
			Model:模型层(dao,model,service) 
			View:视图层(JSP,Velocity,Freemaker)
			Controller:控制层(Servlet,struts2,spring mvc) 获得客户端发送的参数 调用service service调用到
				处理玩程序后，响应具体的视图层页面
	8.ajax:	
		异步的javascript和xml
		
		作用:局部刷新页面