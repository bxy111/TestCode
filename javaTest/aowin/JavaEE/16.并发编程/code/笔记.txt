1.进程和线程
	进程： 独立的应用程序，进程之间的数据是独立的 ，不共享的
	线程： 一个应用程序中执行程序片段的一个线程，线程是抢占式执行的，数据共享的
	
2. 怎么创建线程
	定义一个类 实现 Runnable接口 重写run方法
	new Thread(Runnable runnable)
	
	定义一个 类 extends Thread类 重写run方法
	new ThreadSub()
	
3. 启动线程
	调用线程对象的start()启动线程
	
4. 线程的操作
	Thread.sleep(long time) 暂停线程 不会释放锁资源
	Thread.currentThread() 返回当前正在执行的线程对象
	Thread.yield() 礼让线程，暂时释放cpu资源
	
	t.join() 将t线程加入到当前线程中，直到t中的代码执行结束，才会执行当前线程的
	t.join(long time)
	
	t.setName("") 给线程取名字
	t.setDeamon(boolean b) 设置后台线程
	
5. 线程同步
	一段程序片段同时只能被一个线程执行，一个线程在执行该片段时，别的线程是不能执行该片段的
	
6. 怎么实现同步？
	使用synchronized关键字 隐式锁
	
	同步方法: 静态方法的锁对象是大Class对象，非静态方法的锁对象是this
	同步代码块：可以自定义指定锁对象(Object)
	
	
7. 为什么使用同步？
	多线程之间如果有操作共同的数据时，不添加同步可能会出现线程安全
	
8. 死锁
	锁对象的不正确的嵌套造成的
	
	避免死锁：不要嵌套，或者按照一定的顺序嵌套
	
9. 线程通信 借助于同步方法或者同步代码块
	调用锁对象的 
	wait() 释放锁资源 线程执行阻塞 直到锁对象被调用notify方法后，并且抢占到锁资源后才会执行
	notifyAll() 唤醒所有的调用过当前锁对象的wait()方法的线程对象
	
	
	
	
